import logging
import random
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, filters, ContextTypes
from tarot_data import tarot_deck  # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ tarot_data.py –ª–µ–∂–∏—Ç —Ä—è–¥–æ–º

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)


def main_menu_keyboard():
    return ReplyKeyboardMarkup(
        [
            ["üíñ –õ—é–±–æ–≤—å", "üíº –ö–∞—Ä—å–µ—Ä–∞"],
            ["üåå –ü—É—Ç—å –¥—É—à–∏", "‚ú® –°–æ–≤–µ—Ç"],
            ["üõ†Ô∏è –ü–æ–¥–¥–µ—Ä–∂–∫–∞"]
        ],
        resize_keyboard=True
    )


def draw_card(topic):
    card = random.choice(tarot_deck)
    position = random.choice(["upright", "reversed"])
    card_data = card[position]

    if topic in card_data:
        meaning = card_data[topic]["meaning"]
        description = card_data[topic]["description"]
    else:
        meaning = card_data["meaning"]
        description = card_data["description"]

    return f"üÉè {card['name']} ({'–ø—Ä—è–º–∞—è' if position == 'upright' else '–ø–µ—Ä–µ–≤—ë—Ä–Ω—É—Ç–∞—è'})\n\n{meaning}\n\n–û–ø–∏—Å–∞–Ω–∏–µ: {description}"


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üîÆ –ü—Ä–∏–≤–µ—Ç! –Ø –¢–∞—Ä–æ-–±–æ—Ç. –í—ã–±–∏—Ä–∞–π —Ç–µ–º—É —Ä–∞—Å–∫–ª–∞–¥–∞:",
        reply_markup=main_menu_keyboard()
    )


async def love(update: Update, context: ContextTypes.DEFAULT_TYPE):
    cards = [draw_card("love") for _ in range(3)]
    reply = "üíñ –†–∞—Å–∫–ª–∞–¥ –Ω–∞ –ª—é–±–æ–≤—å:\n\n" + "\n\n".join(cards)
    await update.message.reply_text(reply)


async def career(update: Update, context: ContextTypes.DEFAULT_TYPE):
    cards = [draw_card("career") for _ in range(3)]
    reply = "üíº –†–∞—Å–∫–ª–∞–¥ –Ω–∞ –∫–∞—Ä—å–µ—Ä—É –∏ —Ñ–∏–Ω–∞–Ω—Å—ã:\n\n" + "\n\n".join(cards)
    await update.message.reply_text(reply)


async def soul(update: Update, context: ContextTypes.DEFAULT_TYPE):
    cards = [draw_card("soul_path") for _ in range(3)]
    reply = "üåå –ü—É—Ç—å –¥—É—à–∏ / —Å–∞–º–æ–ø–æ–∑–Ω–∞–Ω–∏–µ:\n\n" + "\n\n".join(cards)
    await update.message.reply_text(reply)


async def advice(update: Update, context: ContextTypes.DEFAULT_TYPE):
    card = draw_card("daily_card")
    reply = "‚ú® –°–æ–≤–µ—Ç –æ—Ç –¢–∞—Ä–æ:\n\n" + card
    await update.message.reply_text(reply)


async def handle_button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    if text == "üíñ –õ—é–±–æ–≤—å":
        await love(update, context)
    elif text == "üíº –ö–∞—Ä—å–µ—Ä–∞":
        await career(update, context)
    elif text == "üåå –ü—É—Ç—å –¥—É—à–∏":
        await soul(update, context)
    elif text == "‚ú® –°–æ–≤–µ—Ç":
        await advice(update, context)
    elif text == "üõ†Ô∏è –ü–æ–¥–¥–µ—Ä–∂–∫–∞":
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –≤ –∏–Ω—Å—Ç–∞–≥—Ä–∞–º taro.pulse, –∏ —è –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –ø–æ–º–æ—á—å!")


def main():
    import os
app = ApplicationBuilder().token(os.getenv("BOT_TOKEN")).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("love", love))
    app.add_handler(CommandHandler("career", career))
    app.add_handler(CommandHandler("soul", soul))
    app.add_handler(CommandHandler("advice", advice))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_button))

    try:
        app.run_polling()
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")


if __name__ == "__main__":
    main()







